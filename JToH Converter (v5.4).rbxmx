<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBXa87fb69d846747eea3d69d7d01414c03">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">JToH Converter (v5.4)</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBXa80871182e594a62afadd25501905484">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main Plugin</string>
				<string name="ScriptGuid">{914a2c97-7971-4f7c-860e-d496136ffc1b}</string>
				<ProtectedString name="Source"><![CDATA[-- Create a new toolbar section
local toolbar = plugin:CreateToolbar("JToH Converters")

-- Add toolbar buttons
local convertersButton = toolbar:CreateButton("Launch Converters", "Choose several parts to convert it into the latest JToH version (v5.4).", "rbxassetid://9948232475")
-- Make button clickable even if 3D viewport is hidden
convertersButton.ClickableWhenViewportHidden = true

-- Create new "DockWidgetPluginGuiInfo" object
local widgetInfo = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float,  -- Widget will be initialized in floating panel
	true,   -- Widget will be initially enabled
	false,  -- Don't override the previous enabled state
	300,    -- Default width of the floating window
	300,    -- Default height of the floating window
	300,    -- Minimum width of the floating window
	200     -- Minimum height of the floating window
)

-- Create a new widget GUI
local convertersWidget = plugin:CreateDockWidgetPluginGui("ConvertersmWidget", widgetInfo)
convertersWidget.Title = "Converters"

local function _() return _ end -- BOOKMARK
-- Widget
--  GUIS
--   Default Format for Guis
local function setScrollFrame(objects)
	if not objects:IsA"table" then
		objects = {objects}
	end
	for _, obj in pairs(objects) do
		obj.BorderSizePixel = 0
		obj.AnchorPoint = Vector2.new(0.5, 0.5)
		obj.Size = UDim2.new(1, 0, 1, 0)
		obj.Position = UDim2.new(0.5, 0, 0.5, 0)
		obj.CanvasSize = UDim2.new(1, -20, 0, 540)
		obj.AutomaticCanvasSize = Enum.AutomaticSize.XY
	end
end

local function setFrame(objects)
	if not objects:IsA"table" then
		objects = {objects}
	end
	for _, obj in pairs(objects) do
		obj.BorderSizePixel = 2
		obj.AnchorPoint = Vector2.new(0.5, 0)
		obj.Size = UDim2.new(1, 0, 0, 150)
		obj.Position = UDim2.new(0.5, 0, 0, 10)
	end
end

local function setLabel(objects)
	if not objects:IsA"table" then
		objects = {objects}
	end
	for _, obj in pairs(objects) do
		obj.BorderSizePixel = 2
		obj.TextSize = 10
		obj.TextColor3 = Color3.new()
		obj.TextXAlignment = "Center"
		obj.AnchorPoint = Vector2.new(0.5, 0)
		obj.Size = UDim2.new(1, 0, 0, 20)
		obj.Position = UDim2.new(0.5, 0, 0, 0)
		obj.Text = "Default Label"
	end
end

local function setButton(objects)
	if not objects:IsA"table" then
		objects = {objects}
	end
	for _, obj in pairs(objects) do
		obj.BorderSizePixel = 2
		obj.BorderMode = "Middle"
		obj.TextSize = 12
		obj.TextWrapped = true
		obj.TextColor3 = Color3.new(1, 1, 1)
		obj.AnchorPoint = Vector2.new(0.5, 0.5)
		obj.Size = UDim2.new(0.75, 0, 0, 100)
		obj.Position = UDim2.new(0.5, 0, 0.5, 10)
		obj.SizeConstraint = Enum.SizeConstraint.RelativeXY
		obj.Text = "Default Button"
	end
end

--   Frames
local cvrtsScrollFrame = Instance.new("ScrollingFrame", convertersWidget)
setScrollFrame(cvrtsScrollFrame)
cvrtsScrollFrame.CanvasSize = UDim2.new(1, -20, 0, 1650)

local cvrtMvPFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtMvPFrame)
cvrtMvPFrame.Position = UDim2.new(0.5, 0, 0, 10)

local cvrtBtDFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtBtDFrame)
cvrtBtDFrame.Position = UDim2.new(0.5, 0, 0, 160)

local cvrtBtnFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtBtnFrame)
cvrtBtnFrame.Position = UDim2.new(0.5, 0, 0, 310)

local cvrtMrpFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtMrpFrame)
cvrtMrpFrame.Position = UDim2.new(0.5, 0, 0, 460)

local cvrtElvFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtElvFrame)
cvrtElvFrame.Position = UDim2.new(0.5, 0, 0, 610)

local cvrtTlpFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtTlpFrame)
cvrtTlpFrame.Position = UDim2.new(0.5, 0, 0, 760)

local cvrtTrtFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtTrtFrame)
cvrtTrtFrame.Position = UDim2.new(0.5, 0, 0, 910)

local cvrtBstrFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtBstrFrame)
cvrtBstrFrame.Position = UDim2.new(0.5, 0, 0, 1060)

local cvrtCnvFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtCnvFrame)
cvrtCnvFrame.Position = UDim2.new(0.5, 0, 0, 1210)

local cvrtPSpnFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(cvrtPSpnFrame)
cvrtPSpnFrame.Position = UDim2.new(0.5, 0, 0, 1360)

local stupDAOFrame = Instance.new("Frame", cvrtsScrollFrame)
setFrame(stupDAOFrame)
stupDAOFrame.Position = UDim2.new(0.5, 0, 0, 1510)

--   Text Labels
--    Titles
local cvrtMvPLabel = Instance.new("TextLabel", cvrtMvPFrame)
setLabel(cvrtMvPLabel)
cvrtMvPLabel.Text = "Moving Platform Converter"

local cvrtBtDLabel = Instance.new("TextLabel", cvrtBtDFrame)
setLabel(cvrtBtDLabel)
cvrtBtDLabel.Text = "Button Deactivator Converter"

local cvrtBtnLabel = Instance.new("TextLabel", cvrtBtnFrame)
setLabel(cvrtBtnLabel)
cvrtBtnLabel.Text = "Button Converter"

local cvrtMrpLabel = Instance.new("TextLabel", cvrtMrpFrame)
setLabel(cvrtMrpLabel)
cvrtMrpLabel.Text = "Morpher Converter"

local cvrtElvLabel = Instance.new("TextLabel", cvrtElvFrame)
setLabel(cvrtElvLabel)
cvrtElvLabel.Text = "Elevator Converter"

local cvrtTlpLabel = Instance.new("TextLabel", cvrtTlpFrame)
setLabel(cvrtTlpLabel)
cvrtTlpLabel.Text = "Teleporter Converter"

local cvrtTrtLabel = Instance.new("TextLabel", cvrtTrtFrame)
setLabel(cvrtTrtLabel)
cvrtTrtLabel.Text = "Turret Converter"

local cvrtBstrLabel = Instance.new("TextLabel", cvrtBstrFrame)
setLabel(cvrtBstrLabel)
cvrtBstrLabel.Text = "Booster Mover & Converter"

local cvrtCnvLabel = Instance.new("TextLabel", cvrtCnvFrame)
setLabel(cvrtCnvLabel)
cvrtCnvLabel.Text = "Conveyor Mover & Converter"

local cvrtPSpnLabel = Instance.new("TextLabel", cvrtPSpnFrame)
setLabel(cvrtPSpnLabel)
cvrtPSpnLabel.Text = "Pushbox Spawner Converter"

local stupDAOLabel = Instance.new("TextLabel", stupDAOFrame)
setLabel(stupDAOLabel)
stupDAOLabel.Text = "Distance Anchoring Objects Builder"

--   Text Buttons
local cvrtMvPButton = Instance.new("TextButton", cvrtMvPFrame)
setButton(cvrtMvPButton)
cvrtMvPButton.Text = "Convert Moving Platforms"

local cvrtBtDButton = Instance.new("TextButton", cvrtBtDFrame)
setButton(cvrtBtDButton)
cvrtBtDButton.Text = "Convert Button Deactivators"

local cvrtBtnButton = Instance.new("TextButton", cvrtBtnFrame)
setButton(cvrtBtnButton)
cvrtBtnButton.Text = "Convert Buttons"

local cvrtMrpButton = Instance.new("TextButton", cvrtMrpFrame)
setButton(cvrtMrpButton)
cvrtMrpButton.Text = "Convert Morphers"

local cvrtElvButton = Instance.new("TextButton", cvrtElvFrame)
setButton(cvrtElvButton)
cvrtElvButton.Text = "Convert Elevators"

local cvrtTlpButton = Instance.new("TextButton", cvrtTlpFrame)
setButton(cvrtTlpButton)
cvrtTlpButton.Text = "Convert Teleporters"

local cvrtTrtButton = Instance.new("TextButton", cvrtTrtFrame)
setButton(cvrtTrtButton)
cvrtTrtButton.Text = "Convert Turrets"

local prntFldr_Bstr = nil
local slctFldrButton_Bstr = Instance.new("TextButton", cvrtBstrFrame)
setButton(slctFldrButton_Bstr)
slctFldrButton_Bstr.Size = UDim2.new(0.375, 0, 0, 100)
slctFldrButton_Bstr.Position = UDim2.new(0.25, 0, 0.5, 10)
slctFldrButton_Bstr.TextScaled = true
slctFldrButton_Bstr.Text = "Select CO Folder / Model (selected: none)"

local moveBstrButton = Instance.new("TextButton", cvrtBstrFrame)
setButton(moveBstrButton)
moveBstrButton.Size = UDim2.new(0.375, 0, 0, 50)
moveBstrButton.Position = UDim2.new(0.75, 0, 0.25, 15)
moveBstrButton.Text = "Move Boosters"

local cvrtBstrButton = Instance.new("TextButton", cvrtBstrFrame)
setButton(cvrtBstrButton)
cvrtBstrButton.Size = UDim2.new(0.375, 0, 0, 50)
cvrtBstrButton.Position = UDim2.new(0.75, 0, 0.75, -5)
cvrtBstrButton.Text = "Convert Boosters"

local prntFldr_Cnv = nil
local slctFldrButton_Cnv = Instance.new("TextButton", cvrtCnvFrame)
setButton(slctFldrButton_Cnv)
slctFldrButton_Cnv.Size = UDim2.new(0.375, 0, 0, 100)
slctFldrButton_Cnv.Position = UDim2.new(0.25, 0, 0.5, 10)
slctFldrButton_Cnv.TextScaled = true
slctFldrButton_Cnv.Text = "Select CO Folder / Model (selected: none)"

local moveCnvButton = Instance.new("TextButton", cvrtCnvFrame)
setButton(moveCnvButton)
moveCnvButton.Size = UDim2.new(0.375, 0, 0, 50)
moveCnvButton.Position = UDim2.new(0.75, 0, 0.25, 15)
moveCnvButton.Text = "Move Conveyors"

local cvrtCnvButton = Instance.new("TextButton", cvrtCnvFrame)
setButton(cvrtCnvButton)
cvrtCnvButton.Size = UDim2.new(0.375, 0, 0, 50)
cvrtCnvButton.Position = UDim2.new(0.75, 0, 0.75, -5)
cvrtCnvButton.Text = "Convert Conveyors"

local cvrtPSpnButton = Instance.new("TextButton", cvrtPSpnFrame)
setButton(cvrtPSpnButton)
cvrtPSpnButton.Text = "Convert Pushbox Spawners"

local prntFldr_DAO = nil
local slctFldrButton_DAO = Instance.new("TextButton", stupDAOFrame)
setButton(slctFldrButton_DAO)
slctFldrButton_DAO.Size = UDim2.new(0.375, 0, 0, 100)
slctFldrButton_DAO.Position = UDim2.new(0.25, 0, 0.5, 10)
slctFldrButton_DAO.TextScaled = true
slctFldrButton_DAO.Text = "Select CO Folder / Model (selected: none)"

local stupDAOButton = Instance.new("TextButton", stupDAOFrame)
setButton(stupDAOButton)
stupDAOButton.Size = UDim2.new(0.375, 0, 0, 100)
stupDAOButton.Position = UDim2.new(0.75, 0, 0.5, 10)
stupDAOButton.Text = "Set-up Distance Anchoring Objects folder"

--  Functions
local function PrntFldrChanged()
	local vName = (prntFldr_Bstr and prntFldr_Bstr.Name) or "none"
	slctFldrButton_Bstr.Text = "Select CO Folder / Model (selected: " .. vName .. ")"
	
	vName = (prntFldr_Cnv and prntFldr_Cnv.Name) or "none"
	slctFldrButton_Cnv.Text = "Select CO Folder / Model (selected: " .. vName .. ")"
	
	vName = (prntFldr_DAO and prntFldr_DAO.Name) or "none"
	slctFldrButton_DAO.Text = "Select CO Folder / Model (selected: " .. vName .. ")"
end

--  Widget Button Functions
local converters_func = require(script.Parent["Converters Functions"])

--   Convert Moving Platforms
cvrtMvPButton.MouseButton1Click:Connect(function()
	converters_func.CvrtMovingPlatform()
end)

cvrtBtDButton.MouseButton1Click:Connect(function()
	converters_func.CvrtButtonDeactivator()
end)

cvrtBtnButton.MouseButton1Click:Connect(function()
	converters_func.CvrtButton()
end)

cvrtMrpButton.MouseButton1Click:Connect(function()
	converters_func.CvrtMorpher()
end)

cvrtElvButton.MouseButton1Click:Connect(function()
	converters_func.CvrtElevator()
end)

cvrtTlpButton.MouseButton1Click:Connect(function()
	converters_func.CvrtTeleporter()
end)

cvrtTrtButton.MouseButton1Click:Connect(function()
	converters_func.CvrtTurret()
end)

slctFldrButton_Bstr.MouseButton1Click:Connect(function()
	prntFldr_Bstr = converters_func.SlctFolder(prntFldr_Bstr)
	PrntFldrChanged()
end)

moveBstrButton.MouseButton1Click:Connect(function()
	converters_func.MoveBoosters(prntFldr_Bstr)
end)

cvrtBstrButton.MouseButton1Click:Connect(function()
	converters_func.CvrtBoosters()
end)

slctFldrButton_Cnv.MouseButton1Click:Connect(function()
	prntFldr_Cnv = converters_func.SlctFolder(prntFldr_Cnv)
	PrntFldrChanged()
end)

moveCnvButton.MouseButton1Click:Connect(function()
	converters_func.MoveConveyors(prntFldr_Cnv)
end)

cvrtCnvButton.MouseButton1Click:Connect(function()
	converters_func.CvrtConveyor()
end)

cvrtPSpnButton.MouseButton1Click:Connect(function()
	converters_func.CvrtPushboxSpawn()
end)

slctFldrButton_DAO.MouseButton1Click:Connect(function()
	prntFldr_DAO = converters_func.SlctFolder(prntFldr_DAO)
	PrntFldrChanged()
end)

stupDAOButton.MouseButton1Click:Connect(function()
	converters_func.SetupDAO(prntFldr_DAO)
end)

local function _() return _ end -- BOOKMARK
-- Functions for Toolbar Buttons
local function convertersButtonClicked()
	convertersWidget.Enabled = not convertersWidget.Enabled
end
convertersButton.Click:Connect(convertersButtonClicked)

-- Event when enable / disable widget
convertersWidget:GetPropertyChangedSignal("Enabled"):Connect(function()
	if convertersWidget.Enabled == false then
		convertersButton.Enabled = false
		convertersButton.Enabled = true
	end
end)

local function _() return _ end -- BOOKMARK
-- Set gui color
local function setGuiColors(objects)
	local rnbw_clr = {Color3.new(0.5017, 1, 0.2510), Color3.new(1, 1, 0.0078), Color3.new(0.9961, 0.4863, 0),
		Color3.new(1, 0.0471, 0.0118), Color3.new(0.7569, 0, 0), Color3.new(0.1961, 0.2549, 0.2941),
		Color3.new(0.7882, 0.0039, 0.7882), Color3.new(0, 0, 1), Color3.new(0.0118, 0.5373, 1),
		Color3.new(0, 1, 1), Color3.new(0.9608, 0.9216, 1)
	}
	local function setColors()
		for i, guiObject in ipairs(objects) do
			-- Set background color
			guiObject.BackgroundColor3 = rnbw_clr[(i - 1) % #rnbw_clr + 1]
			guiObject.BorderColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.ButtonBorder)
			-- Sync
			if (guiObject:IsA("ScrollingFrame")) then
				guiObject.ScrollBarImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			end
		end
	end
	setColors()
end
setGuiColors({cvrtMvPFrame, cvrtBtDFrame, cvrtBtnFrame, cvrtMrpFrame, cvrtElvFrame, cvrtTlpFrame,
	cvrtTrtFrame, cvrtBstrFrame, cvrtCnvFrame, cvrtPSpnFrame, stupDAOFrame
})
-- Sync with studio
local function syncGuiColors(objects)
	local function setColors()
		for _, guiObject in pairs(objects) do
			-- Sync background color
			guiObject.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainBackground)
			guiObject.BorderColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.ButtonBorder)
			-- Sync text color
			if (guiObject:IsA("TextBox") or guiObject:IsA("TextButton") or guiObject:IsA("TextLabel")) then
				guiObject.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			end
			-- Sync
			if (guiObject:IsA("ScrollingFrame")) then
				guiObject.ScrollBarImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			end
		end
	end
	-- Run 'setColors()' function to initially sync colors
	setColors()
	-- Connect 'ThemeChanged' event to the 'setColors()' function
	settings().Studio.ThemeChanged:Connect(setColors)
end
syncGuiColors({cvrtsScrollFrame})

local function syncGuiTitle(objects)
	local function setColors()
		for _, guiObject in pairs(objects) do
			-- Sync background color
			guiObject.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
			guiObject.BorderColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.ButtonBorder)
			-- Sync text color
			if (guiObject:IsA("TextBox") or guiObject:IsA("TextButton") or guiObject:IsA("TextLabel")) then
				guiObject.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			end
			-- Sync
			if (guiObject:IsA("ScrollingFrame")) then
				guiObject.ScrollBarImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			end
		end
	end
	setColors()
	settings().Studio.ThemeChanged:Connect(setColors)
end
syncGuiTitle({cvrtMvPLabel, cvrtBtDLabel, cvrtBtnLabel, cvrtMrpLabel, cvrtElvLabel, cvrtTlpLabel,
	cvrtTrtLabel, cvrtBstrLabel, cvrtCnvLabel, cvrtPSpnLabel, stupDAOLabel
});

local function _() return _ end -- BOOKMARK
-- Mouse cursor
local function setCursor(cursorAsset)
	plugin:GetMouse().Icon = cursorAsset
end

local function setMousePointingHand(objects)
	for _, obj in pairs(objects) do
		obj.MouseEnter:Connect(function()
			setCursor("rbxasset://SystemCursors/PointingHand")
		end)
		obj.MouseLeave:Connect(function()
			setCursor("")
		end)
	end
end

setMousePointingHand({cvrtMvPButton, cvrtBtDButton, cvrtBtnButton, cvrtMrpButton, cvrtElvButton,
	cvrtTlpButton, cvrtTrtButton, slctFldrButton_Bstr, moveBstrButton, cvrtBstrButton, slctFldrButton_Cnv,
	moveCnvButton, cvrtCnvButton, cvrtPSpnButton, slctFldrButton_DAO, stupDAOButton
})]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXe022fd5d23e34375b8bfa2a41d7f7e3a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Converters Functions</string>
				<string name="ScriptGuid">{38f21234-587e-4ae6-ab80-9d06af2e15dc}</string>
				<ProtectedString name="Source"><![CDATA[local myfunction = {}

function myfunction.foo()

	local CHS = game:GetService("ChangeHistoryService")

	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()

	-- Example converter
	CHS:SetWaypoint("Converting Example")
	local code = [[]]
	local cnt = table.create(1, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			
		end
	end
	print(cnt[1] .. " examples created")
	CHS:SetWaypoint("Converted Example")
end

function myfunction.CvrtMovingPlatform()
		
	local CHS = game:GetService("ChangeHistoryService")

	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()

	-- Moving Platform converter
	CHS:SetWaypoint("Converting Moving Platforms")
	local mp_code = [[--i accidentally lost the revamp of this script somehow ahahahahahahaahaha
--i'm in pain why do i have to do this again

return function()
	script.Parent.Platform.AlignPosition.Attachment1 = script.Parent.Positions.a1.Attachment
	script.Parent.Platform.AlignOrientation.Attachment1 = script.Parent.Positions.a1.Attachment
	script.Parent.Platform.Anchored = false
	if script.Parent:FindFirstChild("InvisiblePositions") and script.Parent.InvisiblePositions.Value then
		for _, p in pairs(script.Parent.Positions:GetChildren()) do
			if p:IsA"BasePart" then
				p.Transparency = 1
				p.CanCollide = false --this is probably completely useless
				p.Size = Vector3.new() --otherwise, funky hitboxes
			end
		end
	end
	while wait() do
		for i = 1, #script.Parent.Positions:GetChildren() do
			local nextpos = script.Parent.Positions['a' .. i]
			script.Parent.Platform.AlignPosition.Attachment1 = nextpos.Attachment
			script.Parent.Platform.AlignOrientation.Attachment1 = nextpos.Attachment
			wait(script.Parent:FindFirstChild("Delay") and script.Parent.Delay.Value or 5)
		end
	end
end]]
	local cnt = table.create(9, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Moving Platform" and co:IsA"Model" then
				-- Modify positions
				local cop = co:FindFirstChild"Positions"
				if cop then
					for _, pos in pairs(cop:GetChildren()) do
						-- Clear existing attachments
						for _, att in pairs(pos:GetChildren()) do
							if att:IsA"Attachment" and att.Name == "Attachment" then
								att:Destroy()
								cnt[1] = cnt[1] + 1
							end
						end
						-- Create a new attachment
						local att1 = Instance.new("Attachment", pos)
						cnt[2] = cnt[2] + 1
					end
				end
				-- Modify platform
				local cop = co:FindFirstChild"Platform"
				if cop then
					--  Delete body movers
					for _, bdy in pairs(cop:GetChildren()) do
						if bdy:IsA"BodyGyro" and bdy.Name == "BodyGyro" then
							bdy:Destroy()
							cnt[3] = cnt[3] + 1
						end
						if bdy:IsA"BodyPosition" and bdy.Name == "BodyPosition" then
							bdy:Destroy()
							cnt[4] = cnt[4] + 1
						end
					end
					--  Create align movers if needed
					local att = Instance.new("Attachment", co.Platform)
					local newali = 0
					if not cop:FindFirstChild"AlignOrientation" then
						local al_ori = Instance.new("AlignOrientation", co.Platform)
						al_ori.Attachment0 = att
						al_ori.MaxTorque = 99999997952
						cnt[5] = cnt[5] + 1
						newali = newali + 1
					end
					if not cop:FindFirstChild"AlignPosition" then
						local al_pos = Instance.new("AlignPosition", co.Platform)
						al_pos.Attachment0 = att
						al_pos.MaxForce = 99999997952
						cnt[6] = cnt[6] + 1
						newali = newali + 1
					end
					if newali == 0 then
						att:Destroy()
					else
						cnt[7] = cnt[7] + 1
					end
				end
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = mp_code
					cnt[8] = cnt[8] + 1
				elseif not string.find(cos.Source, "AlignPosition.Attachment1") then
					cos.Source = mp_code
					cnt[9] = cnt[9] + 1
				end
			end
		end
	end
	print(cnt[1] .. " removed attachments from positions")
	print(cnt[2] .. " new position attachments")
	print(cnt[3] .. " BodyGyro removed")
	print(cnt[4] .. " BodyPosition removed")
	print(cnt[5] .. " new AlignOrientation")
	print(cnt[6] .. " new AlignPosition")
	print(cnt[7] .. " new platform attachments")
	print(cnt[8] .. " scripts created")
	print(cnt[9] .. " scripts modified")
	CHS:SetWaypoint("Converted Moving Platforms")
end

function myfunction.CvrtButtonDeactivator()
	
	local CHS = game:GetService("ChangeHistoryService")

	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Button Deactivator converter
	CHS:SetWaypoint("Converting Button Deactivators")
	local bd_code = [[return function()
	script.Parent.Transparency=1
	script.Parent.Touched:Connect(function(t)
		local yesplr = (script.Parent.SupportPlayers.Value and game.Players:GetPlayerFromCharacter(t.Parent)==game.Players.LocalPlayer)
		local yesbox = (script.Parent.SupportPushboxes.Value) and (t.Name == "Pushbox" or t:FindFirstChild("IsBox") ~= nil)
		if (yesplr or yesbox) then
			if script.Parent:FindFirstChild("ColorSpecific") and script.Parent.ColorSpecific.Value then
				for _,d in pairs(script.Parent.Parent:GetDescendants()) do
					if d and d.Name=='Pressed' and d.Parent.Name=='Button' then
						for _,v in pairs(d.Parent:GetChildren()) do
							if v:IsA("BasePart") and v.Color == script.Parent.Color and v:FindFirstChild("Press") ~= nil then
								d.Value=false
							end
						end

					end
				end
			else
				for _,d in pairs(script.Parent.Parent:GetDescendants()) do
					if d and d.Name=='Pressed' and d.Parent.Name=='Button' then
						d.Value=false
					end
				end
			end
		end
	end)
end]]
	local cnt = table.create(5, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "ButtonDeactivator" and co:IsA"BasePart" then
				-- Modify bool values if needed
				local cobv = co:FindFirstChild"ColorSpecific"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ColorSpecific"
					cnt[1] = cnt[1] + 1
				end
				local cobv = co:FindFirstChild"SupportPlayers"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "SupportPlayers"
					cobv.Value = true
					cnt[2] = cnt[2] + 1
				end
				local cobv = co:FindFirstChild"SupportPushboxes"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "SupportPushboxes"
					cobv.Value = true
					cnt[3] = cnt[3] + 1
				end
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = bd_code
					cnt[4] = cnt[4] + 1
				elseif not string.match(cos.Source, "yesbox") then
					cos.Source = bd_code
					cnt[5] = cnt[5] + 1
				end
			end
		end
	end
	print(cnt[1] .. " new bool values (ColorSpecific)")
	print(cnt[2] .. " new bool values (SupportPlayers)")
	print(cnt[3] .. " new bool values (SupportPushboxes)")
	print(cnt[4] .. " scripts created")
	print(cnt[5] .. " scripts modified")
	CHS:SetWaypoint("Converted Button Deactivators")
end

function myfunction.CvrtButton()

	local CHS = game:GetService("ChangeHistoryService")

	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()

	-- Button converter
	CHS:SetWaypoint("Converting Buttons")
	local bt_code = [[local p=script.Parent.Parent
local plr=game.Players.LocalPlayer
local unpressedcf=script.Parent.CFrame
local pressedcf=unpressedcf*CFrame.new(0,-script.Parent.Size.Y*.75,0)
local ts=game:GetService'TweenService'
local invert=p:FindFirstChild'Invert' and p.Invert.Value
local ch=0
function tween(part,time,inf)
	local tweeninf=TweenInfo.new(
		time,
		Enum.EasingStyle.Linear,
		Enum.EasingDirection.Out
	)
	local tw=ts:Create(part,tweeninf,inf)
	tw:Play()
end
function update(v)
	local truev=v
	if invert then v=not v end
	local invertedbutton
	local pressedbutton
	for n,b in pairs(_G.Buttons[script.Parent.Color]) do
		if n~='Active' then
			local isinvert=b:FindFirstChild'Invert' and b.Invert.Value
			local ispressed=b:FindFirstChild'Pressed' and b.Pressed.Value
			if ispressed then pressedbutton=true end
			if isinvert and ispressed then invertedbutton=true end
			local invertfactor=isinvert and not ispressed
		end
	end
	if not invert and (pressedbutton and not truev) then return end
	if not pressedbutton and invert then return end
	if invertedbutton and not invert then return end
	for _,pl in pairs(p.Parent:GetDescendants()) do
		if pl:IsA'BasePart' then
			local v=v
			local c=pl.Color
			local co=pl:FindFirstChild'ColorOverride'
			if co then
				c=co.Value
			end
			c=Color3.fromRGB(math.floor(c.r*255 + 0.5),math.floor(c.g*255 + 0.5),math.floor(c.b*255 + 0.5))
			if pl:FindFirstChild'Invert' then v=not v end
			local function asfd()
				for _,d in pairs(pl:GetDescendants()) do
					if d:IsA'ParticleEmitter' or d:IsA'Beam' or d:IsA'Trail' then
						d.Enabled=v
					end
					if d:IsA'Decal' or d:IsA'Texture' then
						local onT = (d:FindFirstChild("SetTransparency") and d.SetTransparency.Value) or 0
						tween(d,.3,{Transparency=(v and onT or (pl:FindFirstChild'FullHide' and 1 or .6))})
					end
					if d.Name=='Activated' and d:IsA'BoolValue' then
						d.Value=v
					end
				end
			end
			local samecolor=c==Color3.fromRGB(math.floor(script.Parent.Color.r*255 + 0.5),math.floor(script.Parent.Color.g*255 + 0.5),math.floor(script.Parent.Color.b*255 + 0.5))
			if (pl.Name=='ButtonActivatedPlatform' or pl:FindFirstChild("ButtonActivated") ~= nil) and samecolor then
				asfd()
				local onT = (pl:FindFirstChild("SetTransparency") and pl.SetTransparency.Value) or 0
				if not pl:FindFirstChild"IgnoreCanCollide" and not pl:FindFirstChild"IgnoreAll" then
					pl.CanCollide=v
				end
				if not pl:FindFirstChild"IgnoreTransparency" and not pl:FindFirstChild"IgnoreAll" then
					tween(pl,.3,{Transparency=(v and onT or (pl:FindFirstChild'FullHide' and 1 or .6))})
				end
			end
		end
	end
end
return function()
	local pr=p:WaitForChild'Pressed'
	local snd=script.Parent:WaitForChild'Press'
	update(false)
	pr.Changed:Connect(function(v)
		ch=ch+1
		script.Parent.Material=v and 'Neon' or 'Metal'
		if script.Parent.Anchored then
			tween(script.Parent,1,{CFrame=(v and pressedcf or unpressedcf)})
		end
		if v then snd:Play() end
		update(v)
	end)
	script.Parent.Touched:Connect(function(t)
		local h=t.Parent:FindFirstChild'Humanoid'
		local yesplr=p.SupportPlayers.Value and h and game.Players:GetPlayerFromCharacter(t.Parent)==plr
		local yesbox=p.SupportPushboxes.Value and (t.Name == "Pushbox" or t:FindFirstChild("IsBox") ~= nil) and not (p.ColorSpecific.Value and t.Color ~= script.Parent.Color)
		local yesbal=p.SupportBalloons.Value and 
			t.Name == "Part" and t.Material == Enum.Material.Neon and t:FindFirstChild("BodyVelocity") and not (p.ColorSpecific.Value and t.Color ~= script.Parent.Color)
		local yestur = p.SupportTurrets.Value and t.Name == "Bullet" and not (p.ColorSpecific.Value and t.Color ~= script.Parent.Color)
		if (yesplr or yesbox or yesbal or yestur) and not pr.Value then
			pr.Value=true
			if p:FindFirstChild('Timer') and p.Timer.Value>0.01 then
				local pre=ch
				local sg=Instance.new('SurfaceGui')
				sg.Face='Top'
				sg.CanvasSize=Vector2.new(100,100)
				if p.HideGUI.Value then
					sg.Enabled = false
				end
				local txt=Instance.new('TextLabel',sg)
				txt.BackgroundTransparency=1
				local c=script.Parent.Color
				txt.Size=UDim2.new(1,0,1,0)
				txt.BackgroundTransparency=1
				txt.TextColor3=Color3.new(1-c.r,1-c.g,1-c.b)
				txt.TextScaled=true
				txt.Text=p.Timer.Value
				if _G.AttachTimer and p.HideGUI.Value == false then
					_G:AttachTimer(script.Parent,txt)
				end
				sg.Parent=script.Parent
				for i=p.Timer.Value,1,-1 do
					if ch~=pre then break end
					txt.Text=i
					wait(1)
				end
				sg:Destroy()
				if ch==pre then pr.Value=false end
			end
		end
	end)
end]]
	local cnt = table.create(4, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Button" and co:IsA"Model" and not co:FindFirstChild"NewMorph" then
				-- Create bool values if needed
				local cobv = co:FindFirstChild"HideGUI"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "HideGUI"
					cnt[1] = cnt[1] + 1
				end
				local cobv = co:FindFirstChild"SupportTurrets"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "SupportTurrets"
					cobv.Value = true
					cnt[2] = cnt[2] + 1
				end
				-- Modify script
				for _, p in pairs(co:GetChildren()) do
					if p:FindFirstChild"Press" then
						local cos = p:FindFirstChild"ClientObjectScript"
						if not cos then
							cos = Instance.new("ModuleScript", p)
							cos.Name = "ClientObjectScript"
							cos.Source = bt_code
							cnt[3] = cnt[3] + 1
						elseif not string.match(cos.Source, "HideGUI") then
							cos.Source = bt_code
							cnt[4] = cnt[4] + 1
						end
						break
					end
				end
			end
		end
	end
	print(cnt[1] .. " new bool values (HideGUI)")
	print(cnt[2] .. " new bool values (SupportTurrets)")
	print(cnt[3] .. " scripts created")
	print(cnt[4] .. " scripts modified")
	CHS:SetWaypoint("Converted Buttons")
end

function myfunction.CvrtMorpher()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Morpher converter
	CHS:SetWaypoint("Converting Morphers")
	local mrph_code = [[-- Morpher by Ep_och (EloEppo)


local CollectionService = game:GetService("CollectionService")
local Debris = game:GetService("Debris")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")


local player = Players.LocalPlayer


local durationGui = script:WaitForChild("DurationGui")
local pressSound = script:WaitForChild("Press")
local tickSound = script:WaitForChild("Tick")


local morpher = script.Parent
local morph = morpher:WaitForChild("Morph")


local DEFAULT_DURATION = 0
local DEFAULT_SPEED = .25


local function getButtons()
	local buttons = {}
	
	
	for k, v in pairs(morpher:GetDescendants()) do
		if v.Name == "Button" then
			local button = v:FindFirstChild("Button")
			
			
			local newMorphs = {}
			
			
			for k, v in pairs(v:GetDescendants()) do
				if v.Name == "NewMorph" then
					table.insert(newMorphs, v)
				end
			end
			
			
			if button and #newMorphs > 0 then
				local duration = v:FindFirstChild("MorphDuration")
				local speed = v:FindFirstChild("MorphSpeed")
				
				
				duration = duration and duration.Value or DEFAULT_DURATION
				speed = speed and speed.Value or DEFAULT_SPEED
				
				
				buttons[button] = {NewMorphs = newMorphs, Duration = duration, Speed = speed}
			end
		end
	end
	
	
	return buttons
end


return function()
	local id = HttpService:GenerateGUID()
	
	
	local buttons = getButtons()
	
	
	local currentButton = nil
	
	
	local defaultMorph = morph:Clone()
	defaultMorph.Transparency = 1
	defaultMorph.CanCollide = false
	
	
	defaultMorph.Parent = morpher
	
	
	local cloneMorphs = {}
	
	
	for k, v in pairs(buttons) do
		k.Touched:Connect(function(touch)
			local yesplr=k.Parent.SupportPlayers.Value and Players:GetPlayerFromCharacter(touch.Parent)==player
			local yesbox=k.Parent.SupportPushboxes.Value and (touch.Name == "Pushbox" or touch:FindFirstChild("IsBox") ~= nil)
			local yesbal=k.Parent.SupportBalloons.Value and 
				touch.Name == "Part" and touch.Material == Enum.Material.Neon and touch:FindFirstChild("BodyVelocity") 
			local yestur = k.Parent.SupportTurrets.Value and touch.Name == "Bullet"
			if (yesplr or yesbox or yesbal or yestur) and k ~= currentButton then

				local pressSound = pressSound:Clone()
				pressSound.Parent = k
					
					
				pressSound:Play()
					
					
				Debris:AddItem(pressSound, 5)
					
					
				local info = TweenInfo.new(v.Speed, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
					
					
				for _, newMorph in pairs(v.NewMorphs) do
					if newMorph == v.NewMorphs[1] then
						TweenService:Create(k, info, {Color = newMorph.Color}):Play()
						TweenService:Create(morph, info, {Color = newMorph.Color, Size = newMorph.Size, CFrame = newMorph.CFrame}):Play()
							
							
						morph.Material = newMorph.Material
							
							
						for _, cloneMorph in pairs(cloneMorphs) do
							spawn(function()
								TweenService:Create(cloneMorph, info, {Color = newMorph.Color, Size = newMorph.Size, CFrame = newMorph.CFrame}):Play()
									
									
								wait(v.Speed)
									
									
								cloneMorph:Destroy()
							end)
						end
					else
						local cloneMorph = morph:Clone()
						cloneMorph.Parent = morpher
							
							
						TweenService:Create(cloneMorph, info, {Color = newMorph.Color, Size = newMorph.Size, CFrame = newMorph.CFrame}):Play()
							
							
						cloneMorph.Material = newMorph.Material
							
							
						table.insert(cloneMorphs, cloneMorph)
					end
				end
					
					
				if currentButton then
					local durationGui = currentButton:FindFirstChild("DurationGui")
						
						
					if durationGui then
						durationGui:Destroy()
					end
						
						
					TweenService:Create(currentButton, info, {Color = Color3.new(0, 0, 0)}):Play()
				end
					
					
				currentButton = k
					
					
				RunService:UnbindFromRenderStep("MorpherDuration" .. id)
					
					
				if v.Duration > 0 then
					local durationGui = durationGui:Clone()
					durationGui.Enabled = true
						
						
					durationGui.Parent = k
						
						
					local tickSound = tickSound:Clone()
					tickSound.Parent = k
						
						
					tickSound:Play()
						
						
					local epoch = time() -- No, it's not named after me
						
						
					RunService:BindToRenderStep("MorpherDuration" .. id, 1, function()
						local elapsed = time() - epoch
						local remaining = math.ceil(v.Duration - elapsed)
								
								
						if elapsed >= v.Duration then
							durationGui:Destroy()
								
								
							Debris:AddItem(tickSound, 5)
								
								
							local info = TweenInfo.new(DEFAULT_SPEED, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
								
								
							TweenService:Create(k, info, {Color = Color3.new(0, 0, 0)}):Play()
							TweenService:Create(morph, info, {Color = defaultMorph.Color, Size = defaultMorph.Size, CFrame = defaultMorph.CFrame}):Play()
								
								
							morph.Material = defaultMorph.Material
								
								
							for _, cloneMorph in pairs(cloneMorphs) do
								spawn(function()
									TweenService:Create(cloneMorph, info, {Color = defaultMorph.Color, Size = defaultMorph.Size, CFrame = defaultMorph.CFrame}):Play()
										
										
									wait(v.Speed)
										
										
									cloneMorph:Destroy()
								end)
							end
								
								
							if currentButton then
								TweenService:Create(currentButton, info, {Color = Color3.new(0, 0, 0)}):Play()
							end
								
								
							currentButton = nil
								
								
							RunService:UnbindFromRenderStep("MorpherDuration" .. id)
						else
							durationGui.TextLabel.Text = remaining
							
							
							durationGui.TextLabel.Changed:Connect(function(property)
								if property == "Text" then
									tickSound:Play()
								end
							end)
						end
					end)
				end
			end
		end)
	end
end]]
	local cnt = table.create(3, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Morpher" and co:IsA"Model" and co:FindFirstChild"Morph" then
				-- Create bool values if needed
				for _, cobt in pairs(co:GetChildren()) do
					if cobt.Name == "Button" and cobt:IsA"Model" and cobt:FindFirstChild"NewMorph" then
						local cobv = cobt:FindFirstChild"SupportTurrets"
						if not cobv then
							cobv = Instance.new("BoolValue", cobt)
							cobv.Name = "SupportTurrets"
							cobv.Value = true
							cnt[1] = cnt[1] + 1
						end
					end
				end
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = mrph_code
					cnt[2] = cnt[2] + 1
				elseif not string.match(cos.Source, "yestur") then
					cos.Source = mrph_code
					cnt[3] = cnt[3] + 1
				end
			end
		end
	end
	print(cnt[1] .. " new bool values (SupportTurrets)")
	print(cnt[2] .. " scripts created")
	print(cnt[3] .. " scripts modified")
	CHS:SetWaypoint("Converted Morphers")
end

function myfunction.CvrtElevator()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Elevator converter
	CHS:SetWaypoint("Converting Elevators")
	local elv_code = [[return function()
	script.Parent.TopSurface = 'Studs'
	if script.Parent.Name == "ButtonActivatedPlatform" or script.Parent:FindFirstChild("ButtonActivated") then
		local a = Instance.new("BoolValue",script.Parent)
		a.Name = "Activated"
	end
	local players = not script.Parent:FindFirstChild("IgnorePlayers")
	local boxes = not script.Parent:FindFirstChild("IgnoreBoxes")
	local speed = script.Parent:FindFirstChild("Speed") and script.Parent.Speed.Value or 40
	script.Parent.Touched:Connect(function(part)
		local torso = part.Parent:FindFirstChild("Torso") or part
		if (not torso:FindFirstChild("ElevatorVelocity") and (part.Parent:FindFirstChild("Humanoid") and players) or ((part.Name == "Pushbox" or part:FindFirstChild("IsBox") ~= nil) and boxes))
			and not (script.Parent:FindFirstChild("Activated") and not script.Parent.Activated.Value) then
			local velocity = Instance.new("BodyVelocity", torso)
			velocity.Name = "ElevatorVelocity"
			local uv=script.Parent.CFrame.UpVector
			local maxf=Vector3.new(0,math.huge,0)
			if uv.X ~= 0 then maxf = Vector3.new(math.huge, maxf.Y, maxf.Z) end
			if uv.Z ~= 0 then maxf = Vector3.new(maxf.X, maxf.Y, math.huge) end
			
			velocity.MaxForce = maxf
			velocity.Velocity = script.Parent.CFrame.UpVector*speed
		end
	end)
	script.Parent.TouchEnded:Connect(function(part)
		local torso = part.Parent:FindFirstChild("Torso") or part
		if torso:FindFirstChild("ElevatorVelocity") and (part.Parent:FindFirstChild("Humanoid") and players) or ((part.Name == "Pushbox" or part:FindFirstChild("IsBox") ~= nil) and boxes) then torso.ElevatorVelocity:Destroy() end
	end)
end]]
	local cnt = table.create(3, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Elevator" and co:IsA"BasePart" and co:FindFirstChild"Speed" then
				-- Remove bool values if they're unnecessary
				for _, blvl in pairs(co:GetChildren()) do
					if blvl.Name == "Activated" and blvl:IsA"BoolValue" then
						blvl:Destroy()
						cnt[1] = cnt[1] + 1
					end
				end
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = elv_code
					cnt[2] = cnt[2] + 1
				elseif not string.match(cos.Source, "a.Name = \"Activated\"") then
					cos.Source = elv_code
					cnt[3] = cnt[3] + 1
				end
			end
		end
	end
	print(cnt[1] .. " removed bool values (Activated)")
	print(cnt[2] .. " scripts created")
	print(cnt[3] .. " scripts modified")
	CHS:SetWaypoint("Converted Elevators")
end

function myfunction.CvrtTeleporter()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Teleporter converter
	CHS:SetWaypoint("Converting Teleporters")
	local tlp_code = [[local p = script.Parent

return function()
	local destinations = {}
	local rb = p:FindFirstChild'RemoveButtons' and p.RemoveButtons.Value
	for _, tp in pairs(p:GetDescendants()) do
		if tp.Name == "Destination" then
			tp.Transparency = 1
			table.insert(destinations, tp)
		elseif tp.Name == "Teleporter" then
			tp.Transparency = 1
			if tp:FindFirstChild("ButtonActivated") then
				local a = Instance.new("BoolValue",tp)
				a.Name = "Activated"
			end
			tp.Touched:Connect(function(t)
				if tp:FindFirstChild"Activated" and not tp.Activated.Value then return end
				local dests = {}
				for _, d in pairs(destinations) do
					if not (d:FindFirstChild"Activated" and not d.Activated.Value) then
						table.insert(dests, d)
					end
				end
				if #dests <= 0 then return end
				local d = dests[math.random(1, #dests)]
				if p:FindFirstChild('TeleportPushboxes') and p.TeleportPushboxes.Value then
					if (t.Name == "Pushbox" or t:FindFirstChild("IsBox") ~= nil) then
						d.TeleportSound:Play()
						t.CFrame=d.CFrame*CFrame.new(0,5,0)
					end
				end
				if p:FindFirstChild('TeleportPlayers') and game.Players:GetPlayerFromCharacter(t.Parent) == game.Players.LocalPlayer then
					if rb then
						for _, b in pairs(_G.Button.Buttons) do
							b.Pressed.Value = false
						end
					end
					d.TeleportSound:Play()
					t.Parent:SetPrimaryPartCFrame(d.CFrame * CFrame.new(0, 5, 0))
				end
			end)
		end
	end
end]]
	local cnt = table.create(3, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Teleporter" and co:IsA"Model" then
				-- Remove bool values if they're unnecessary
				for _, blvl in pairs(co:GetChildren()) do
					if blvl.Name == "Activated" and blvl:IsA"BoolValue" then
						blvl:Destroy()
						cnt[1] = cnt[1] + 1
					end
				end
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = tlp_code
					cnt[2] = cnt[2] + 1
				elseif not string.match(cos.Source, "a.Name = \"Activated\"") then
					cos.Source = tlp_code
					cnt[3] = cnt[3] + 1
				end
			end
		end
	end
	print(cnt[1] .. " removed bool values (Activated)")
	print(cnt[2] .. " scripts created")
	print(cnt[3] .. " scripts modified")
	CHS:SetWaypoint("Converted Teleporters")
end

function myfunction.CvrtTurret()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Turret converter
	CHS:SetWaypoint("Converting Turrets")
	local trt_code = [[local holysize=math.huge
return function()
	local p=script.Parent
	local plr=game.Players.LocalPlayer
	local holesize=math.huge
	p.FrontSurface='Smooth'
	if p.Size.X<holesize then holesize=p.Size.X end
	if p.Size.Y<holesize then holesize=p.Size.Y end
	local bulletsize=holesize*.9
	if p.Size.Z<bulletsize then bulletsize=p.Size.Z end
	local h=Instance.new('Part')
	h.Name='Hole'
	h.CanCollide=false
	h.Color=Color3.new()
	h.Material='Neon'
	h.Shape='Cylinder'
	h.Size=Vector3.new(.1,holesize,holesize)
	h.CFrame=(p.CFrame*CFrame.new(0,0,-p.Size.Z/2))*CFrame.Angles(0,math.pi/2,0)
	h.CastShadow=false
	h.Transparency=p.Transparency
	if p.Name == "ButtonActivatedPlatform" or p:FindFirstChild("ButtonActivated") then
		local a = Instance.new("BoolValue",p)
		a.Name = "Activated"
		game:GetService("RunService").RenderStepped:Connect(function()
			if h.Transparency ~= p.Transparency then
				h.Transparency = p.Transparency
			end
		end)
	end
	local w=Instance.new('WeldConstraint',p)
	w.Part0=p
	w.Part1=h
	h.Parent=p
	while wait(p.Delay.Value) do
		local c=plr.Character
		if c and c.PrimaryPart then
			local pp=c.PrimaryPart
			if (pp.Position-p.Position).magnitude<p.Distance.Value and not (p:FindFirstChild("Activated") and p.Activated.Value == false) then
				local c=p.Fire:Clone()
				c.Name='SoundEffect'
				c.Parent=p
				c:Play()
				game.Debris:AddItem(c,5)
				local b=Instance.new('Part')
				b.Name='Bullet'
				b.CanCollide=false
				b.Color=p.Color
				b.Material='Neon'
				b.Shape='Ball'
				b.Size=Vector3.new(bulletsize,bulletsize,bulletsize)
				b.CFrame=p.CFrame
				local bv=Instance.new('BodyVelocity',b)
				bv.MaxForce=Vector3.new(math.huge,math.huge,math.huge)
				bv.Velocity=b.CFrame.lookVector*p.Speed.Value
				b.Parent=p
				game.Debris:AddItem(b,30)
				b.Touched:Connect(function(t)
					if t.CanCollide and t~=p and t.Parent~=p then
						task.wait()
						b:Destroy()
						local h=t.Parent:FindFirstChild'Humanoid'
						if h and t:IsDescendantOf(plr.Character) then
							game.ReplicatedStorage.DamageEvent:FireServer(p.Damage.Value)
						end
					end
				end)
			end
		end
	end
end]]
	local cnt = table.create(2, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Turret" and co:IsA"BasePart" and co:FindFirstChild"Speed" then
				-- Modify script
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = trt_code
					cnt[1] = cnt[1] + 1
				elseif not string.match(cos.Source, "a.Name = \"Activated\"") then
					cos.Source = trt_code
					cnt[2] = cnt[2] + 1
				end
			end
		end
	end
	print(cnt[1] .. " scripts created")
	print(cnt[2] .. " scripts modified")
	CHS:SetWaypoint("Converted Turrets")
end

function myfunction.MoveBoosters(prnt_fldr)
	
	-- Check parent folder
	if not prnt_fldr then
		warn("Please select a parent folder or model first!")
		return 0
	end
	
	-- Move boosters
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Boosters mover
	CHS:SetWaypoint("Moving Boosters")
	local cnt = table.create(4, 0)
	local str_tbl = {
		["Jump Booster"] = 1,
		["Jump Remover"] = 2,
		["Speed Booster"] = 3,
		["Speed Remover"] = 4,
	}
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if str_tbl[co.Name] ~= nil and co:IsA"BasePart" then
				local index = str_tbl[co.Name]
				-- Modify parent
				if prnt_fldr and not co:IsDescendantOf(prnt_fldr) then
					co.Parent = prnt_fldr
					cnt[index] = cnt[index] + 1
				end
			end
		end
	end
	print(cnt[1] .. " jump boosters moved")
	print(cnt[2] .. " jump removers moved")
	print(cnt[3] .. " speed boosters moved")
	print(cnt[4] .. " speed removers moved")
	CHS:SetWaypoint("Moved Boosters")
end

function myfunction.CvrtBoosters()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Boosters converter
	CHS:SetWaypoint("Converting Boosters")
	local jmp_bst_code = [[local ts=game:GetService'TweenService'
function tween(part,time,inf)
	local tweeninf=TweenInfo.new(
		time,
		Enum.EasingStyle.Linear,
		Enum.EasingDirection.Out
	)
	local tw=ts:Create(part,tweeninf,inf)
	tw:Play()
end
local val
local instant = script.Parent:FindFirstChild("Instant") and script.Parent.Instant.Value == true
return function()
	script.Parent.Touched:Connect(function(t)
		local h=t.Parent:FindFirstChild'Humanoid'
		if h and not h:FindFirstChild'JumpBoost' then
			local v=Instance.new('NumberValue',h)
			v.Name='JumpBoost'
			v.Value=script.Parent.BoostLength.Value
			tween(h,(instant and 0) or .5,{JumpPower=script.Parent.JumpPower.Value})
			repeat
				v.Value=v.Value-.1
				wait(.1)
			until not v or not v.Parent or v.Value<=0
			tween(h,(instant and 0) or .5,{JumpPower=50})
			for _,c in pairs(h:GetChildren()) do
				if c.Name=='JumpBoost' then
					c:Destroy()
				end
			end
		else
			if h and h:FindFirstChild("JumpBoost") then
				h.JumpBoost.Value=script.Parent.BoostLength.Value
			end
		end
	end)
end]]
	local jmp_rmv_code = [[return function()
	script.Parent.Touched:Connect(function(t)
		local h=t.Parent:FindFirstChild'Humanoid'
		if h and h:FindFirstChild'JumpBoost' then
			h.JumpBoost:Destroy()
		end
	end)
end]]
	local spd_bst_code = [[local ts=game:GetService'TweenService'
function tween(part,time,inf)
	local tweeninf=TweenInfo.new(
		time,
		Enum.EasingStyle.Linear,
		Enum.EasingDirection.Out
	)
	local tw=ts:Create(part,tweeninf,inf)
	tw:Play()
end
local val
local instant = script.Parent:FindFirstChild("Instant") and script.Parent.Instant.Value == true
return function()
	script.Parent.Touched:Connect(function(t)
		local h=t.Parent:FindFirstChild'Humanoid'
		if h and not h:FindFirstChild'SpeedBoost' then
			local v=Instance.new('NumberValue',h)
			v.Name='SpeedBoost'
			v.Value=script.Parent.BoostLength.Value
			tween(h,(instant and 0) or .5,{WalkSpeed=script.Parent.WalkSpeed.Value})
			repeat
				v.Value=v.Value-.1
				wait(.1)
			until not v or not v.Parent or v.Value<=0
			tween(h,(instant and 0) or .5,{WalkSpeed=16})
			for _,c in pairs(h:GetChildren()) do
				if c.Name=='SpeedBoost' then
					c:Destroy()
				end
			end
		else
			if h and h:FindFirstChild("SpeedBoost") then
				h.SpeedBoost.Value=script.Parent.BoostLength.Value
			end
		end
	end)
end]]
	local spd_rmv_code = [[return function()
	script.Parent.Touched:Connect(function(t)
		local h=t.Parent:FindFirstChild'Humanoid'
		if h and h:FindFirstChild'SpeedBoost' then
			h.SpeedBoost:Destroy()
		end
	end)
end]]
	local cnt = table.create(4, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Jump Booster" and co:IsA"BasePart" then
				-- Jump boosters
				local updt = 0
				
				-- Create bool values if needed
				local cobv = co:FindFirstChild"ClientObject"
				local coprnt = co.Parent
				while coprnt and not cobv do
					cobv = coprnt:FindFirstChild"ClientObject"
					coprnt = coprnt.Parent
				end
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ClientObject"
					updt = 1
				end
				
				local cobv = co:FindFirstChild"Instant"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "Instant"
					updt = 1
				end
				
				-- Modify scripts
				local cos = co:FindFirstChild"Script" or co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = jmp_bst_code
					updt = 1
				elseif cos:IsA"Script" then
					cos:Destroy()
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = jmp_bst_code
					updt = 1
				elseif not string.match(cos.Source, "script.Parent.Instant.Value == true") then
					cos.Source = jmp_bst_code
					updt = 1
				end
				
				cnt[1] = cnt[1] + updt
			elseif co.Name == "Jump Remover" and co:IsA"BasePart" then
				-- Jump removers
				local updt = 0
				
				-- Create bool values if needed
				local cobv = co:FindFirstChild"ClientObject"
				local coprnt = co.Parent
				while coprnt and not cobv do
					cobv = coprnt:FindFirstChild"ClientObject"
					coprnt = coprnt.Parent
				end
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ClientObject"
					updt = 1
				end
				
				-- Modify scripts
				local cos = co:FindFirstChild"Script" or co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = jmp_rmv_code
					updt = 1
				elseif cos:IsA"Script" then
					cos:Destroy()
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = jmp_rmv_code
					updt = 1
				elseif not string.match(cos.Source, "return function()") then
					cos.Source = jmp_rmv_code
					updt = 1
				end
				
				cnt[2] = cnt[2] + updt
			elseif co.Name == "Speed Booster" and co:IsA"BasePart" then
				-- Speed boosters
				local updt = 0
				
				-- Create bool values if needed
				local cobv = co:FindFirstChild"ClientObject"
				local coprnt = co.Parent
				while coprnt and not cobv do
					cobv = coprnt:FindFirstChild"ClientObject"
					coprnt = coprnt.Parent
				end
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ClientObject"
					updt = 1
				end
				
				local cobv = co:FindFirstChild"Instant"
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "Instant"
					updt = 1
				end
				
				-- Modify scripts
				local cos = co:FindFirstChild"Script" or co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = spd_bst_code
					updt = 1
				elseif cos:IsA"Script" then
					cos:Destroy()
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = spd_bst_code
					updt = 1
				elseif not string.match(cos.Source, "script.Parent.Instant.Value == true") then
					cos.Source = spd_bst_code
					updt = 1
				end
				
				cnt[3] = cnt[3] + updt
			elseif co.Name == "Speed Remover" and co:IsA"BasePart" then
				-- Speed removers
				local updt = 0
				
				-- Create bool values if needed
				local cobv = co:FindFirstChild"ClientObject"
				local coprnt = co.Parent
				while coprnt and not cobv do
					cobv = coprnt:FindFirstChild"ClientObject"
					coprnt = coprnt.Parent
				end
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ClientObject"
					updt = 1
				end
				
				-- Modify scripts
				local cos = co:FindFirstChild"Script" or co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = spd_rmv_code
					updt = 1
				elseif cos:IsA"Script" then
					cos:Destroy()
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = spd_rmv_code
					updt = 1
				elseif not string.match(cos.Source, "return function()") then
					cos.Source = spd_rmv_code
					updt = 1
				end
				
				cnt[4] = cnt[4] + updt
			end
		end
	end
	print(cnt[1] .. " jump boosters converted")
	print(cnt[2] .. " jump removers converted")
	print(cnt[3] .. " speed boosters converted")
	print(cnt[4] .. " speed removers converted")
	CHS:SetWaypoint("Converted Boosters")
end

function myfunction.MoveConveyors(prnt_fldr)
	
	-- Check parent folder
	if not prnt_fldr then
		warn("Please select a parent folder or model first!")
		return 0
	end
	
	-- Move conveyor
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Conveyor mover
	CHS:SetWaypoint("Moving Conveyors")
	local cnt = table.create(1, 0)
	local str_tbl = {
		["Conveyor"] = 1,
	}
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if str_tbl[co.Name] ~= nil and co:IsA"BasePart" then
				local index = str_tbl[co.Name]
				-- Modify parent
				if prnt_fldr and not co:IsDescendantOf(prnt_fldr) then
					co.Parent = prnt_fldr
					cnt[index] = cnt[index] + 1
				end
			end
		end
	end
	print(cnt[1] .. " conveyors moved")
	CHS:SetWaypoint("Moved Conveyors")
end

function myfunction.CvrtConveyor()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Conveyor converter
	CHS:SetWaypoint("Converting Conveyors")
	local cnv_code = [[return function()
	script.Parent.FrontSurface = "Studs"
	
	if script.Parent.Anchored then
		script.Parent.Velocity = script.Parent.CFrame.LookVector * script.Parent.Speed.Value
	else
		game:GetService("RunService").RenderStepped:Connect(function()
			script.Parent.Velocity = script.Parent.CFrame.LookVector * script.Parent.Speed.Value
		end)
	end
end]]
	local beam_code = [[return function()
	script.Parent.TextureSpeed = script.Parent.Parent.Parent.Speed.Value / script.Parent.TextureLength
end]]
	local cnt = table.create(3, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "Conveyor" and co:IsA"BasePart" then
				-- Create bool values if needed
				local cobv = co:FindFirstChild"ClientObject"
				local coprnt = co.Parent
				while coprnt and not cobv do
					cobv = coprnt:FindFirstChild"ClientObject"
					coprnt = coprnt.Parent
				end
				if not cobv then
					cobv = Instance.new("BoolValue", co)
					cobv.Name = "ClientObject"
					cnt[1] = cnt[1] + 1
				end
				
				-- Modify scripts
				--  Convenyor script
				local cos = co:FindFirstChild"Script" or co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = cnv_code
					cnt[2] = cnt[2] + 1
				elseif cos:IsA"Script" then
					cos:Destroy()
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = cnv_code
					cnt[2] = cnt[2] + 1
				elseif not string.match(cos.Source, "return function()") then
					cos.Source = cnv_code
					cnt[2] = cnt[2] + 1
				end
				--  Beam script
				for _, att in pairs(co:GetChildren()) do
					if att:IsA"Attachment" then
						for _, beam in pairs(att:GetChildren()) do
							if beam:IsA"Beam" then
								local cos = beam:FindFirstChild"Script" or beam:FindFirstChild"ClientObjectScript"
								if not cos then
									cos = Instance.new("ModuleScript", beam)
									cos.Name = "ClientObjectScript"
									cos.Source = beam_code
									cnt[3] = cnt[3] + 1
								elseif cos:IsA"Script" then
									cos:Destroy()
									cos = Instance.new("ModuleScript", beam)
									cos.Name = "ClientObjectScript"
									cos.Source = beam_code
									cnt[3] = cnt[3] + 1
								elseif not string.match(cos.Source, "return function()") then
									cos.Source = beam_code
									cnt[3] = cnt[3] + 1
								end
							end
						end
					end
				end
			end
		end
	end
	print(cnt[1] .. " new bool values (ClientObject)")
	print(cnt[2] .. " conveyor scripts created or modified")
	print(cnt[3] .. " beam scripts created or modified")
	CHS:SetWaypoint("Converted Conveyors")
end

function myfunction.CvrtPushboxSpawn()
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Pushbox Spawner converter
	CHS:SetWaypoint("Converting Pushbox Spawners")
	local pspn_code = [[local Players = game:GetService("Players")
local player = Players.LocalPlayer

local pushBoxSpawnButton = script.Parent
local button = pushBoxSpawnButton:WaitForChild("Button")
local pushBox = pushBoxSpawnButton:WaitForChild("Pushbox")

local currentBox = nil

local function spawnBox()
	if currentBox then
		currentBox:Destroy()
	end
	local box = pushBox:Clone()
	box.Parent = pushBoxSpawnButton
	currentBox = box
	if box:IsA("BasePart") then
		box.Anchored = false
	else
		for _,b in pairs(box:GetDescendants()) do
			if b:IsA("BasePart") and b:FindFirstChild("BoxAnchor") == nil then
				b.Anchored = false
			end
		end
	end
	for _,bc in pairs(box:GetDescendants()) do
		if bc:IsA("ModuleScript") and bc.Name == ("PushboxScript") then
			spawn(function()
				require(bc)()
			end)
		end
	end
end
return function()
	local db = false
	button.Touched:Connect(function(touch)
		if (Players:GetPlayerFromCharacter(touch.Parent) == player) and db == false then
			spawnBox()
			db = true
			task.wait(script.Parent.Cooldown.Value)
			db = false
		end
	end)
	pushBox.Parent = nil
	if not script.Parent:FindFirstChild("DontSpawnFirst") then spawnBox() end
end]]
	local cnt = table.create(3, 0)
	for _, slc in pairs(selections) do
		local slc2 = slc:GetDescendants()
		table.insert(slc2, slc)
		for _, co in pairs(slc2) do
			if co.Name == "PushboxSpawnButton" and co:IsA"Model" then
				-- Create values if needed
				local conv = co:FindFirstChild"Cooldown"
				if not conv then
					conv = Instance.new("NumberValue", co)
					conv.Name = "Cooldown"
					conv.Value = 0.5
					cnt[1] = cnt[1] + 1
				end
				
				-- Modify scripts
				local cos = co:FindFirstChild"ClientObjectScript"
				if not cos then
					cos = Instance.new("ModuleScript", co)
					cos.Name = "ClientObjectScript"
					cos.Source = pspn_code
					cnt[2] = cnt[2] + 1
				elseif not string.match(cos.Source, "db == false") then
					cos.Source = pspn_code
					cnt[3] = cnt[3] + 1
				end
			end
		end
	end
	print(cnt[1] .. " new number values (Cooldown)")
	print(cnt[2] .. " scripts created")
	print(cnt[3] .. " scripts modified")
	CHS:SetWaypoint("Converted Pushbox Spawners")
end

function myfunction.SetupDAO(prnt_fldr)
	
	-- Check parent folder
	if not prnt_fldr then
		warn("Please select a parent folder or model first!")
		return 0
	end
	
	-- Set-up Distance Anchoring Objects folder
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Distance Anchoring Objects builder
	CHS:SetWaypoint("Setting up Distance Anchoring Objects")
	local read_me = [=[--[[

-Don't worry about this if your tower doesn't lag at all





-Put a client object in here and it will only move while your character is within a set distance from it
-There is a DefaultDistance value in the ClientObjectScript
-Putting a "CustomDistance" value in a client object will have that client object use that distance instead of the DefaultDistance value

--]]]=]
	local dao_code = [[
return function()
	local defaultDistance = script.DefaultDistance.Value
	local char = game.Players.LocalPlayer.Character
	game.Players.LocalPlayer.CharacterAdded:Connect(function(c)
		char = game.Players.LocalPlayer.Character
	end)
	for _,m in pairs(script.Parent:GetChildren()) do
		if m:IsA("Model") then
			local dynamicTable = {}
			local primary
			for _,p in pairs(m:GetDescendants()) do
				if p:IsA("BasePart") then
					if p.Anchored == true then
						primary = p
					else
						table.insert(dynamicTable,p)
					end
				end
			end
			coroutine.wrap(function()
				while task.wait(.125) do
					if char ~= nil then
						local distance = (char.Torso.Position-primary.Position).magnitude
						local md = (m:FindFirstChild("CustomDistance") ~= nil and m.CustomDistance.Value) or defaultDistance
						for _,d in pairs(dynamicTable) do
							d.Anchored = (distance > md and true) or false
						end
					end
				end
			end)()
		end
	end
end]]
	local cnt = table.create(5, 0)
	-- Create folder
	local dao_fldr = prnt_fldr:FindFirstChild("DistanceAnchoringObjects")
	if not dao_fldr then
		dao_fldr = Instance.new("Folder", prnt_fldr)
		dao_fldr.Name = "DistanceAnchoringObjects"
		cnt[1] = cnt[1] + 1
	end
	-- Create bool values
	local cobv = dao_fldr:FindFirstChild"ClientObject"
	if not cobv then
		cobv = Instance.new("BoolValue", dao_fldr)
		cobv.Name = "ClientObject"
		cnt[2] = cnt[2] + 1
	end
	-- Modify script
	local cos = dao_fldr:FindFirstChild"readme"
	if not cos then
		cos = Instance.new("Script", dao_fldr)
		cos.Name = "readme"
		cos.Source = read_me
		cos.Disabled = true
		cnt[3] = cnt[3] + 1
	end
	cos = dao_fldr:FindFirstChild"ClientObjectScript"
	if not cos then
		cos = Instance.new("ModuleScript", dao_fldr)
		cos.Name = "ClientObjectScript"
		cos.Source = dao_code
		cnt[4] = cnt[4] + 1
	end
	-- Create number values
	local conv = cos:FindFirstChild"DefaultDistance"
	if not conv then
		conv = Instance.new("NumberValue", cos)
		conv.Name = "DefaultDistance"
		conv.Value = 100
		cnt[5] = cnt[5] + 1
	end
	-- Print result
	print(cnt[1] .. " new folder (DistanceAnchoringObjects)")
	print(cnt[2] .. " new bool value (ClientObject)")
	print(cnt[3] .. " new script (readme)")
	print(cnt[4] .. " new module script (ClientObjectScript)")
	print(cnt[5] .. " new number values (DefaultDistance)")
	CHS:SetWaypoint("Finished setting up Distance Anchoring Objects")
end

local function _() return _ end -- BOOKMARK
function myfunction.SlctFolder(prnt_fldr)
	
	local CHS = game:GetService("ChangeHistoryService")
	
	local selections = workspace:GetDescendants()
	selections = game.Selection:Get()
	
	-- Folder / model selecter
	CHS:SetWaypoint("Selecting Folder or Model")
	local fldr = prnt_fldr
	local fldrs = {}
	for _, obj in pairs(selections) do
		if obj:IsA"Folder" or obj:IsA"Model" then
			table.insert(fldrs, obj)
		end
	end
	if #fldrs > 1 then
		warn("Selected " .. #fldrs .. " folders or models, expected 1")	
		print("Folder or model unchanged")
	elseif #fldrs == 1 then
		fldr = fldrs[1]
		print(fldr.ClassName .. " " .. fldr.Name .. " selected")	
	else
		fldr = nil
		print("Folder or model deselected")
	end
	CHS:SetWaypoint("Selected Folder or Model")
	
	return fldr
end

return myfunction
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Decal" referent="RBX03144492c94a49bcae3c544c5e5edb6d">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Color3 name="Color3">
					<R>1</R>
					<G>1</G>
					<B>1</B>
				</Color3>
				<token name="Face">5</token>
				<string name="Name">Decal</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<Content name="Texture"><url>rbxassetid://9948232475</url></Content>
				<float name="Transparency">0</float>
				<int name="ZIndex">1</int>
			</Properties>
		</Item>
	</Item>
</roblox>